<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>面向对象编程 on uh</title>
    <link>https://uhuuh.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 面向对象编程 on uh</description>
    <image>
      <title>uh</title>
      <url>https://uhuuh.github.io/images/papermod-cover.png</url>
      <link>https://uhuuh.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://uhuuh.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式</title>
      <link>https://uhuuh.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://uhuuh.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>UML类图 ==方法返回类型== 原则 依赖倒置原则: 一般而言, 相关的一些类之间形成模块, 模块之间产生依赖. 高层次的模块依赖低层次模块, 而低层次的模块容易因需求而变动, 进而导致依赖它的整个上游模块变动. 模块之上定义一个稳定的抽象层, 抽象(抽象等价于稳定)之间可以相互依赖. 模块也可以进一步细化到一个类的实现上, 类仅仅依赖抽象(接口或者抽象类) 开放封闭原则: 类不能被修改, 可以被扩展 单一职责原则: 一个类应该仅有一个变化的原因，该变化隐含了它的职责. 类的职责太多意味着这个类更有可能被修改 替换原则: 在代码中的任意地方, 派生类可以替换基类 接口隔离原则: 接口设计应该尽可能小而完备. 接口暴露越多意味接口变动的可能性变多 优先使用组合而不是继承: 组合相比于继承使类之间的耦合更小. 感觉无论是组合和继承都需要依赖另一个对象, 强调组合和继承依赖程度上的区别没有意义, 而应该强调组合和继承在功能上的区别 合成复用原则: 尽量使用合成/聚合的方式，而不是使用继承 对象创建相关 单例 当创建一个对象, 出于性能或者鲁棒性的考虑只需要该对象的一个实例 工厂方法 当创建一个对象, 这个对象可能变动 抽象工厂 当创建一系列相互依赖的对象时, 这些对象可能变动 原型 当创建一个对象时, 直接复制可能更方便时 建造者 当创建一个对象时, 这个对象的创建过程中可能使用到多种可选步骤 接口使用相关 门面 当需要封装一系列对象为子系统时 将一系列功能上相关的对象组成一个子系统, 为该子系统定义稳定的接口 适配器 当使用一个对象适配另一个它没有实现的接口时 装饰器 当给对象原有接口增加新功能时 装饰器模式通过组合和继承实现, 另外有着动态决定对象原有接口新增功能的优点, 具体在main方法中使用一个装饰器对象构造另一个装饰器对象. 如果装饰器模式通过继承实现, 由于装饰器对象继承的基类已经决定, 达不到上述优点 代理 当给对象原有接口访问时增加中间层, 一般为了接口调用的访问控制和缓存等 装饰器模式和代理模式的实现都是基于组合和继承, 由于侧重的使用场景略有不同, 代理模式只有一个代理对象, 装饰器模式可以有多个装饰器, 而多个装饰器之间可以套娃 场景表示相关 复合 当使用对象继承体系表示一个树形事物时 状态 当对象继承体系实现状态机, 避免使用条件语句实现状态机时不好动态添加状态, 需要事先确定改变状态的所有方法 单个状态对象只需要一个实例, 一般命令模式会结合单例模式 状态对象仅仅表示该状态和状态的转移, 一般持有当前状态和负责修改当前状态在另一个对象中 策略 当使用对象表示策略时, 实现策略的运行时可替换 使用上可以等同于一些语言中的函数对象 命令 当使用对象表示请求时, 实现请求的记录和撤销等 官方的UML类图过于理想化 解析器 略, 用的很少 迭代器 当需要提供通用的迭代对象集合的方法时 访问者 当需要给对象集合中添加各种各样的处理对象的方法时 访问器针对不同的元素实现不同的处理 有很大的限制性, 需要对象集合中的对象元素已经确定 中介者 当多个对象相互交互时, 需要修改其中的一个对象时需要改动相互依赖的所有对象 实现时添加一个中介者, 所有对象与中介者交互, 一般修改一个对象时只需要对象改对象和中介者 观察者 当对象的状态变化需要通知其他对象时, 使用该模式后可以增加和删除通知者 责任链 当一个请求有多种处理者时, 使用该模式后动态增加和删除处理者 备忘录 当需要保存与加载对象的状态 略有过时, 现在可以使用对象序列化和反序列化替代 其他 模板方法 当对象方法中某些处理上固定时, 使用该模式后可以只需要实现方法中变化的部分 实现时借助抽象类, 具体要将一个方法拆分成固定和变化两个方法 桥接 当对象继承体系要对应两个维度上的变化时, 比如图形的图形和颜色 如果仅仅使用继承实现的话有子类数量爆炸的问题, 需要结合继承和组合实现.</description>
    </item>
  </channel>
</rss>
