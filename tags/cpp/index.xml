<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cpp on uh</title>
    <link>https://uhuuh.github.io/tags/cpp/</link>
    <description>Recent content in Cpp on uh</description>
    <image>
      <title>uh</title>
      <url>https://uhuuh.github.io/images/papermod-cover.png</url>
      <link>https://uhuuh.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 30 Sep 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://uhuuh.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读书笔记 effective modern cpp</title>
      <link>https://uhuuh.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-effective-modern-cpp/</link>
      <pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://uhuuh.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-effective-modern-cpp/</guid>
      <description>右值引用, 移动语义, 完美转发 23.理解std::move和std::forward 函数的形参是左值, 函数的返回值是右值, 即便该然回值的类型是右值引用 move只是将实参转化右值引用, 经过函数返回后变成右值 template&amp;lt;typename T&amp;gt; typename remove_reference&amp;lt;T&amp;gt;::type&amp;amp;&amp;amp; move(T&amp;amp;&amp;amp; param) { using ReturnType = typename remove_reference&amp;lt;T&amp;gt;::type&amp;amp;&amp;amp;; return static_cast&amp;lt;ReturnType&amp;gt;(param); // move只进行类型转换 } 右值引用接受一个非const的右值, 因为右值引用一般用于移动语义, 在其中要修改对象内部成员. 当对象存在一个拷贝构造函数和移动构造函数时, const右值会调用拷贝构造函数 class Annotation { public: explicit Annotation(const std::string text) ： value(std::move(text)) //“移动”text到value里；这段代码执行起来 { … } //并不是看起来那样 … private: std::string value; }; 在函数内部调用forward转化形参为实参相应类型的变量 void process(const Widget&amp;amp; lvalArg); //处理左值 void process(Widget&amp;amp;&amp;amp; rvalArg); //处理右值 template&amp;lt;typename T&amp;gt; //用以转发param到process的模板 void logAndProcess(T&amp;amp;&amp;amp; param) { auto now = std::chrono::system_clock::now(); makeLogEntry(&amp;#34;Calling &amp;#39;process&amp;#39;&amp;#34;, now); process(std::forward&amp;lt;T&amp;gt;(param)); // 没经过forward只能调用左值版本 } forward可以替换move class Widget { public: Widget(Widget&amp;amp;&amp;amp; rhs) : s(std::move(rhs.</description>
    </item>
    <item>
      <title>读书笔记 effective C&#43;&#43;</title>
      <link>https://uhuuh.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-effective-c&#43;&#43;/</link>
      <pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://uhuuh.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-effective-c&#43;&#43;/</guid>
      <description>让自己习惯c++ 1.c++是一个语言联邦 c++支持多种编程泛型, 面向过程, 基于对象, 面向对象, 泛型, 元编程
c++可以视为一个语言联邦, 由以下四个部分组成
c object oriented c++ template c++ stl 2.替换define 当define一个常量时, 调试不方便, 只剩下数值没有原来的变量名信息
使用const定义全局常量 使用const在类中定义常量 class A { private: static const double a; // 声明, static确保所有类只有一份该变量 } const double A::a = 1.35; // static成员变量必须在类外定义 - 旧式编译器不支持static成员变量在声明时获得初值class A{ private: static const double a; } const double A::a = 1.35; - 然后再类编译又需要一个常量值时(比如确定数组的大小), 可以使用enum hack技术. enum和define有很多相似的地方, enum最后会被替换成int, enum不能取地址class A{ private: enum {n = 5}; int arr[n]; } 当define一个函数时, 写起来很麻烦, 而且容易出错</description>
    </item>
  </channel>
</rss>
